<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="7" total="25" passed="18">
  <reporter-output>
  </reporter-output>
  <suite name="Suite" duration-ms="688776" started-at="2020-06-09T13:50:58Z" finished-at="2020-06-09T14:02:26Z">
    <groups>
    </groups>
    <test name="Test" duration-ms="688776" started-at="2020-06-09T13:50:58Z" finished-at="2020-06-09T14:02:26Z">
      <class name="test.Test_ForgetPassword">
        <test-method status="PASS" signature="set()[pri:0, instance:test.Test_ForgetPassword@2a2d45ba]" test-instance-name="" name="set" is-config="true" duration-ms="9890" started-at="2020-06-09T20:50:58Z" finished-at="2020-06-09T20:51:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- set -->
        <test-method status="PASS" signature="forgetpassword_invalidEmail()[pri:0, instance:test.Test_ForgetPassword@2a2d45ba]" test-instance-name="" name="forgetpassword_invalidEmail" duration-ms="41455" started-at="2020-06-09T20:51:08Z" finished-at="2020-06-09T20:51:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- forgetpassword_invalidEmail -->
        <test-method status="PASS" signature="done(org.testng.ITestResult)[pri:0, instance:test.Test_ForgetPassword@2a2d45ba]" test-instance-name="" name="done" is-config="true" duration-ms="233" started-at="2020-06-09T20:51:49Z" finished-at="2020-06-09T20:51:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name="" status=SUCCESS method=Test_ForgetPassword.forgetpassword_invalidEmail()[pri:0, instance:test.Test_ForgetPassword@2a2d45ba] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- done -->
        <test-method status="PASS" signature="set()[pri:0, instance:test.Test_ForgetPassword@2a2d45ba]" test-instance-name="" name="set" is-config="true" duration-ms="33597" started-at="2020-06-09T20:51:49Z" finished-at="2020-06-09T20:52:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- set -->
        <test-method status="PASS" signature="forgetpassword_invalidPhone()[pri:1, instance:test.Test_ForgetPassword@2a2d45ba]" test-instance-name="" name="forgetpassword_invalidPhone" duration-ms="35227" started-at="2020-06-09T20:52:23Z" finished-at="2020-06-09T20:52:58Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- forgetpassword_invalidPhone -->
        <test-method status="PASS" signature="done(org.testng.ITestResult)[pri:0, instance:test.Test_ForgetPassword@2a2d45ba]" test-instance-name="" name="done" is-config="true" duration-ms="252" started-at="2020-06-09T20:52:58Z" finished-at="2020-06-09T20:52:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name="" status=SUCCESS method=Test_ForgetPassword.forgetpassword_invalidPhone()[pri:1, instance:test.Test_ForgetPassword@2a2d45ba] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- done -->
        <test-method status="PASS" signature="set()[pri:0, instance:test.Test_ForgetPassword@2a2d45ba]" test-instance-name="" name="set" is-config="true" duration-ms="17547" started-at="2020-06-09T20:52:58Z" finished-at="2020-06-09T20:53:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- set -->
        <test-method status="PASS" signature="forgetpassword_emailNotRegistered()[pri:2, instance:test.Test_ForgetPassword@2a2d45ba]" test-instance-name="" name="forgetpassword_emailNotRegistered" duration-ms="24798" started-at="2020-06-09T20:53:16Z" finished-at="2020-06-09T20:53:41Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- forgetpassword_emailNotRegistered -->
        <test-method status="PASS" signature="done(org.testng.ITestResult)[pri:0, instance:test.Test_ForgetPassword@2a2d45ba]" test-instance-name="" name="done" is-config="true" duration-ms="238" started-at="2020-06-09T20:53:41Z" finished-at="2020-06-09T20:53:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name="" status=SUCCESS method=Test_ForgetPassword.forgetpassword_emailNotRegistered()[pri:2, instance:test.Test_ForgetPassword@2a2d45ba] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- done -->
        <test-method status="PASS" signature="set()[pri:0, instance:test.Test_ForgetPassword@2a2d45ba]" test-instance-name="" name="set" is-config="true" duration-ms="9630" started-at="2020-06-09T20:53:41Z" finished-at="2020-06-09T20:53:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- set -->
        <test-method status="PASS" signature="forgetpassword_phoneNotRegistered()[pri:3, instance:test.Test_ForgetPassword@2a2d45ba]" test-instance-name="" name="forgetpassword_phoneNotRegistered" duration-ms="25375" started-at="2020-06-09T20:53:51Z" finished-at="2020-06-09T20:54:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- forgetpassword_phoneNotRegistered -->
        <test-method status="PASS" signature="done(org.testng.ITestResult)[pri:0, instance:test.Test_ForgetPassword@2a2d45ba]" test-instance-name="" name="done" is-config="true" duration-ms="140" started-at="2020-06-09T20:54:16Z" finished-at="2020-06-09T20:54:16Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name="" status=SUCCESS method=Test_ForgetPassword.forgetpassword_phoneNotRegistered()[pri:3, instance:test.Test_ForgetPassword@2a2d45ba] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- done -->
      </class> <!-- test.Test_ForgetPassword -->
      <class name="test.Test_Login">
        <test-method status="PASS" signature="set()[pri:0, instance:test.Test_Login@2a5ca609]" test-instance-name="" name="set" is-config="true" duration-ms="85176" started-at="2020-06-09T20:50:58Z" finished-at="2020-06-09T20:52:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- set -->
        <test-method status="PASS" signature="login_invalidEmail()[pri:0, instance:test.Test_Login@2a5ca609]" test-instance-name="" name="login_invalidEmail" duration-ms="45472" started-at="2020-06-09T20:52:23Z" finished-at="2020-06-09T20:53:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- login_invalidEmail -->
        <test-method status="PASS" signature="done(org.testng.ITestResult)[pri:0, instance:test.Test_Login@2a5ca609]" test-instance-name="" name="done" is-config="true" duration-ms="138" started-at="2020-06-09T20:53:08Z" finished-at="2020-06-09T20:53:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name="" status=SUCCESS method=Test_Login.login_invalidEmail()[pri:0, instance:test.Test_Login@2a5ca609] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- done -->
        <test-method status="PASS" signature="set()[pri:0, instance:test.Test_Login@2a5ca609]" test-instance-name="" name="set" is-config="true" duration-ms="7422" started-at="2020-06-09T20:53:08Z" finished-at="2020-06-09T20:53:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- set -->
        <test-method status="PASS" signature="login_invalidPassword()[pri:1, instance:test.Test_Login@2a5ca609]" test-instance-name="" name="login_invalidPassword" duration-ms="37991" started-at="2020-06-09T20:53:16Z" finished-at="2020-06-09T20:53:54Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- login_invalidPassword -->
        <test-method status="PASS" signature="done(org.testng.ITestResult)[pri:0, instance:test.Test_Login@2a5ca609]" test-instance-name="" name="done" is-config="true" duration-ms="272" started-at="2020-06-09T20:53:54Z" finished-at="2020-06-09T20:53:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name="" status=SUCCESS method=Test_Login.login_invalidPassword()[pri:1, instance:test.Test_Login@2a5ca609] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- done -->
        <test-method status="PASS" signature="set()[pri:0, instance:test.Test_Login@2a5ca609]" test-instance-name="" name="set" is-config="true" duration-ms="3123" started-at="2020-06-09T20:53:54Z" finished-at="2020-06-09T20:53:57Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- set -->
        <test-method status="PASS" signature="login_invalidPhone()[pri:2, instance:test.Test_Login@2a5ca609]" test-instance-name="" name="login_invalidPhone" duration-ms="31829" started-at="2020-06-09T20:53:57Z" finished-at="2020-06-09T20:54:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- login_invalidPhone -->
        <test-method status="PASS" signature="done(org.testng.ITestResult)[pri:0, instance:test.Test_Login@2a5ca609]" test-instance-name="" name="done" is-config="true" duration-ms="82" started-at="2020-06-09T20:54:29Z" finished-at="2020-06-09T20:54:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name="" status=SUCCESS method=Test_Login.login_invalidPhone()[pri:2, instance:test.Test_Login@2a5ca609] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- done -->
        <test-method status="PASS" signature="set()[pri:0, instance:test.Test_Login@2a5ca609]" test-instance-name="" name="set" is-config="true" duration-ms="2392" started-at="2020-06-09T20:54:29Z" finished-at="2020-06-09T20:54:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- set -->
        <test-method status="PASS" signature="login_notRegisteredEmail()[pri:3, instance:test.Test_Login@2a5ca609]" test-instance-name="" name="login_notRegisteredEmail" duration-ms="30107" started-at="2020-06-09T20:54:32Z" finished-at="2020-06-09T20:55:02Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- login_notRegisteredEmail -->
        <test-method status="PASS" signature="done(org.testng.ITestResult)[pri:0, instance:test.Test_Login@2a5ca609]" test-instance-name="" name="done" is-config="true" duration-ms="198" started-at="2020-06-09T20:55:02Z" finished-at="2020-06-09T20:55:02Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name="" status=SUCCESS method=Test_Login.login_notRegisteredEmail()[pri:3, instance:test.Test_Login@2a5ca609] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- done -->
        <test-method status="PASS" signature="set()[pri:0, instance:test.Test_Login@2a5ca609]" test-instance-name="" name="set" is-config="true" duration-ms="1749" started-at="2020-06-09T20:55:02Z" finished-at="2020-06-09T20:55:04Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- set -->
        <test-method status="PASS" signature="login_notRegisteredPhone()[pri:4, instance:test.Test_Login@2a5ca609]" test-instance-name="" name="login_notRegisteredPhone" duration-ms="28414" started-at="2020-06-09T20:55:04Z" finished-at="2020-06-09T20:55:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- login_notRegisteredPhone -->
        <test-method status="PASS" signature="done(org.testng.ITestResult)[pri:0, instance:test.Test_Login@2a5ca609]" test-instance-name="" name="done" is-config="true" duration-ms="131" started-at="2020-06-09T20:55:32Z" finished-at="2020-06-09T20:55:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name="" status=SUCCESS method=Test_Login.login_notRegisteredPhone()[pri:4, instance:test.Test_Login@2a5ca609] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- done -->
        <test-method status="PASS" signature="set()[pri:0, instance:test.Test_Login@2a5ca609]" test-instance-name="" name="set" is-config="true" duration-ms="2682" started-at="2020-06-09T20:55:32Z" finished-at="2020-06-09T20:55:35Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- set -->
        <test-method status="PASS" signature="login_success()[pri:5, instance:test.Test_Login@2a5ca609]" test-instance-name="" name="login_success" duration-ms="50400" started-at="2020-06-09T20:55:35Z" finished-at="2020-06-09T20:56:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- login_success -->
        <test-method status="PASS" signature="done(org.testng.ITestResult)[pri:0, instance:test.Test_Login@2a5ca609]" test-instance-name="" name="done" is-config="true" duration-ms="114" started-at="2020-06-09T20:56:25Z" finished-at="2020-06-09T20:56:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name="" status=SUCCESS method=Test_Login.login_success()[pri:5, instance:test.Test_Login@2a5ca609] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- done -->
        <test-method status="PASS" signature="set()[pri:0, instance:test.Test_Login@2a5ca609]" test-instance-name="" name="set" is-config="true" duration-ms="1887" started-at="2020-06-09T20:56:25Z" finished-at="2020-06-09T20:56:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- set -->
        <test-method status="FAIL" signature="login_successByAccount()[pri:5, instance:test.Test_Login@2a5ca609]" test-instance-name="" name="login_successByAccount" duration-ms="117639" started-at="2020-06-09T20:56:27Z" finished-at="2020-06-09T20:58:25Z">
          <exception class="org.openqa.selenium.NoSuchElementException">
            <message>
              <![CDATA[no such element: Unable to locate element: {"method":"css selector","selector":"#email"}
  (Session info: chrome=83.0.4103.61)
For documentation on this error, please visit: https://www.seleniumhq.org/exceptions/no_such_element.html
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'MNCTVN05589', ip: '192.168.43.28', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '1.8.0_221'
Driver info: org.openqa.selenium.remote.RemoteWebDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 83.0.4103.61, chrome: {chromedriverVersion: 83.0.4103.39 (ccbf011cb2d2b..., userDataDir: /tmp/.com.google.Chrome.Ybtfjn}, goog:chromeOptions: {debuggerAddress: localhost:46769}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: LINUX, platformName: LINUX, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:virtualAuthenticators: true, webdriver.remote.sessionid: 908a706693688ddb6da3c5bb47b...}
Session ID: 908a706693688ddb6da3c5bb47bc7ef6
*** Element info: {Using=id, value=email}]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"css selector","selector":"#email"}
  (Session info: chrome=83.0.4103.61)
For documentation on this error, please visit: https://www.seleniumhq.org/exceptions/no_such_element.html
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'MNCTVN05589', ip: '192.168.43.28', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '1.8.0_221'
Driver info: org.openqa.selenium.remote.RemoteWebDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 83.0.4103.61, chrome: {chromedriverVersion: 83.0.4103.39 (ccbf011cb2d2b..., userDataDir: /tmp/.com.google.Chrome.Ybtfjn}, goog:chromeOptions: {debuggerAddress: localhost:46769}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: LINUX, platformName: LINUX, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:virtualAuthenticators: true, webdriver.remote.sessionid: 908a706693688ddb6da3c5bb47b...}
Session ID: 908a706693688ddb6da3c5bb47bc7ef6
*** Element info: {Using=id, value=email}
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
	at java.lang.reflect.Constructor.newInstance(Unknown Source)
	at org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)
	at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)
	at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)
	at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)
	at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)
	at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:323)
	at org.openqa.selenium.remote.RemoteWebDriver.findElementById(RemoteWebDriver.java:372)
	at org.openqa.selenium.By$ById.findElement(By.java:188)
	at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:315)
	at object.Logins.clearFormUsername(Logins.java:117)
	at object.Logins.inputUsername(Logins.java:89)
	at testcases.Login.loginByAccount(Login.java:125)
	at test.Test_Login.login_successByAccount(Test_Login.java:63)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.NoSuchElementException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- login_successByAccount -->
        <test-method status="PASS" signature="done(org.testng.ITestResult)[pri:0, instance:test.Test_Login@2a5ca609]" test-instance-name="" name="done" is-config="true" duration-ms="446" started-at="2020-06-09T20:58:25Z" finished-at="2020-06-09T20:58:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name="" status=FAILURE method=Test_Login.login_successByAccount()[pri:5, instance:test.Test_Login@2a5ca609] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- done -->
        <test-method status="PASS" signature="set()[pri:0, instance:test.Test_Login@2a5ca609]" test-instance-name="" name="set" is-config="true" duration-ms="1191" started-at="2020-06-09T20:58:25Z" finished-at="2020-06-09T20:58:26Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- set -->
        <test-method status="PASS" signature="login_successByContinueWatching()[pri:5, instance:test.Test_Login@2a5ca609]" test-instance-name="" name="login_successByContinueWatching" duration-ms="40960" started-at="2020-06-09T20:58:26Z" finished-at="2020-06-09T20:59:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- login_successByContinueWatching -->
        <test-method status="PASS" signature="done(org.testng.ITestResult)[pri:0, instance:test.Test_Login@2a5ca609]" test-instance-name="" name="done" is-config="true" duration-ms="76" started-at="2020-06-09T20:59:07Z" finished-at="2020-06-09T20:59:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name="" status=SUCCESS method=Test_Login.login_successByContinueWatching()[pri:5, instance:test.Test_Login@2a5ca609] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- done -->
        <test-method status="PASS" signature="set()[pri:0, instance:test.Test_Login@2a5ca609]" test-instance-name="" name="set" is-config="true" duration-ms="1857" started-at="2020-06-09T20:59:08Z" finished-at="2020-06-09T20:59:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- set -->
        <test-method status="PASS" signature="login_successByHistory()[pri:5, instance:test.Test_Login@2a5ca609]" test-instance-name="" name="login_successByHistory" duration-ms="40464" started-at="2020-06-09T20:59:09Z" finished-at="2020-06-09T20:59:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- login_successByHistory -->
        <test-method status="PASS" signature="done(org.testng.ITestResult)[pri:0, instance:test.Test_Login@2a5ca609]" test-instance-name="" name="done" is-config="true" duration-ms="76" started-at="2020-06-09T20:59:50Z" finished-at="2020-06-09T20:59:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name="" status=SUCCESS method=Test_Login.login_successByHistory()[pri:5, instance:test.Test_Login@2a5ca609] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- done -->
        <test-method status="PASS" signature="set()[pri:0, instance:test.Test_Login@2a5ca609]" test-instance-name="" name="set" is-config="true" duration-ms="1572" started-at="2020-06-09T20:59:50Z" finished-at="2020-06-09T20:59:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- set -->
        <test-method status="PASS" signature="login_successByMyList()[pri:5, instance:test.Test_Login@2a5ca609]" test-instance-name="" name="login_successByMyList" duration-ms="43539" started-at="2020-06-09T20:59:52Z" finished-at="2020-06-09T21:00:35Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- login_successByMyList -->
        <test-method status="PASS" signature="done(org.testng.ITestResult)[pri:0, instance:test.Test_Login@2a5ca609]" test-instance-name="" name="done" is-config="true" duration-ms="88" started-at="2020-06-09T21:00:35Z" finished-at="2020-06-09T21:00:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name="" status=SUCCESS method=Test_Login.login_successByMyList()[pri:5, instance:test.Test_Login@2a5ca609] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- done -->
        <test-method status="PASS" signature="set()[pri:0, instance:test.Test_Login@2a5ca609]" test-instance-name="" name="set" is-config="true" duration-ms="1426" started-at="2020-06-09T21:00:35Z" finished-at="2020-06-09T21:00:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- set -->
        <test-method status="FAIL" signature="login_successByQrCode()[pri:5, instance:test.Test_Login@2a5ca609]" test-instance-name="" name="login_successByQrCode" duration-ms="109334" started-at="2020-06-09T21:00:37Z" finished-at="2020-06-09T21:02:26Z">
          <exception class="org.openqa.selenium.json.JsonException">
            <message>
              <![CDATA[java.lang.reflect.InvocationTargetException
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'MNCTVN05589', ip: '192.168.43.28', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '1.8.0_221'
Driver info: driver.version: RemoteWebDriver]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.json.JsonException: java.lang.reflect.InvocationTargetException
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'MNCTVN05589', ip: '192.168.43.28', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '1.8.0_221'
Driver info: driver.version: RemoteWebDriver
	at org.openqa.selenium.json.JsonOutput.convertUsingMethod(JsonOutput.java:332)
	at org.openqa.selenium.json.JsonOutput.lambda$new$16(JsonOutput.java:155)
	at org.openqa.selenium.json.JsonOutput.write(JsonOutput.java:264)
	at org.openqa.selenium.json.JsonOutput.lambda$null$21(JsonOutput.java:168)
	at java.util.LinkedHashMap$LinkedValues.forEach(Unknown Source)
	at org.openqa.selenium.json.JsonOutput.lambda$new$22(JsonOutput.java:168)
	at org.openqa.selenium.json.JsonOutput.write(JsonOutput.java:264)
	at org.openqa.selenium.json.JsonOutput.lambda$null$23(JsonOutput.java:177)
	at com.google.common.collect.SingletonImmutableBiMap.forEach(SingletonImmutableBiMap.java:65)
	at org.openqa.selenium.json.JsonOutput.lambda$new$24(JsonOutput.java:176)
	at org.openqa.selenium.json.JsonOutput.write(JsonOutput.java:264)
	at org.openqa.selenium.json.JsonOutput.write(JsonOutput.java:255)
	at org.openqa.selenium.json.Json.toJson(Json.java:42)
	at org.openqa.selenium.remote.http.AbstractHttpCommandCodec.encode(AbstractHttpCommandCodec.java:227)
	at org.openqa.selenium.remote.http.AbstractHttpCommandCodec.encode(AbstractHttpCommandCodec.java:117)
	at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:152)
	at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)
	at org.openqa.selenium.remote.RemoteWebDriver.perform(RemoteWebDriver.java:618)
	at org.openqa.selenium.interactions.Actions$BuiltAction.perform(Actions.java:639)
	at object.Logins.popupButtonLogin(Logins.java:51)
	at testcases.Login.loginByQrCode(Login.java:206)
	at test.Test_Login.login_successByQrCode(Test_Login.java:95)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
	Suppressed: org.openqa.selenium.json.JsonException: Attempting to close incomplete json stream
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'MNCTVN05589', ip: '192.168.43.28', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '1.8.0_221'
Driver info: driver.version: RemoteWebDriver
		at org.openqa.selenium.json.JsonOutput.close(JsonOutput.java:279)
		at org.openqa.selenium.json.Json.toJson(Json.java:44)
		... 22 more
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.GeneratedMethodAccessor6.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.openqa.selenium.json.JsonOutput.convertUsingMethod(JsonOutput.java:328)
	... 34 more
Caused by: org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"//button[contains(text(),'Sign In')]"}
  (Session info: chrome=83.0.4103.61)
For documentation on this error, please visit: https://www.seleniumhq.org/exceptions/no_such_element.html
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'MNCTVN05589', ip: '192.168.43.28', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '1.8.0_221'
Driver info: org.openqa.selenium.remote.RemoteWebDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 83.0.4103.61, chrome: {chromedriverVersion: 83.0.4103.39 (ccbf011cb2d2b..., userDataDir: /tmp/.com.google.Chrome.XhX6c2}, goog:chromeOptions: {debuggerAddress: localhost:33905}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: LINUX, platformName: LINUX, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:virtualAuthenticators: true, webdriver.remote.sessionid: 200616d98dd0bf55e82acab6a9b...}
Session ID: 200616d98dd0bf55e82acab6a9b113af
*** Element info: {Using=xpath, value=//button[contains(text(),'Sign In')]}
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
	at java.lang.reflect.Constructor.newInstance(Unknown Source)
	at org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)
	at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)
	at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)
	at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)
	at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)
	at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:323)
	at org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:428)
	at org.openqa.selenium.By$ByXPath.findElement(By.java:353)
	at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:315)
	at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:69)
	at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)
	at com.sun.proxy.$Proxy7.getWrappedElement(Unknown Source)
	at org.openqa.selenium.interactions.PointerInput$Origin.asArg(PointerInput.java:204)
	at org.openqa.selenium.interactions.PointerInput$Move.encode(PointerInput.java:155)
	at org.openqa.selenium.interactions.Sequence.encode(Sequence.java:75)
	at org.openqa.selenium.interactions.Sequence.toJson(Sequence.java:84)
	... 38 more
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.json.JsonException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- login_successByQrCode -->
        <test-method status="PASS" signature="done(org.testng.ITestResult)[pri:0, instance:test.Test_Login@2a5ca609]" test-instance-name="" name="done" is-config="true" duration-ms="492" started-at="2020-06-09T21:02:26Z" finished-at="2020-06-09T21:02:26Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name="" status=FAILURE method=Test_Login.login_successByQrCode()[pri:5, instance:test.Test_Login@2a5ca609] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- done -->
      </class> <!-- test.Test_Login -->
      <class name="test.Test_Mylist">
        <test-method status="PASS" signature="set()[pri:0, instance:test.Test_Mylist@7c16905e]" test-instance-name="" name="set" is-config="true" duration-ms="9941" started-at="2020-06-09T20:50:58Z" finished-at="2020-06-09T20:51:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- set -->
        <test-method status="FAIL" signature="mylist_addByAccountLogin()[pri:0, instance:test.Test_Mylist@7c16905e]" test-instance-name="" name="mylist_addByAccountLogin" duration-ms="69095" started-at="2020-06-09T20:51:08Z" finished-at="2020-06-09T20:52:17Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [‌] but found [dibayarlunas1video]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [‌] but found [dibayarlunas1video]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:513)
	at org.testng.Assert.assertEqualsImpl(Assert.java:135)
	at org.testng.Assert.assertEquals(Assert.java:116)
	at org.testng.Assert.assertEquals(Assert.java:190)
	at org.testng.Assert.assertEquals(Assert.java:200)
	at object.Mylists.validateMylistAdded(Mylists.java:113)
	at testcases.Mylist.addMylistByAccountLogin(Mylist.java:25)
	at test.Test_Mylist.mylist_addByAccountLogin(Test_Mylist.java:17)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- mylist_addByAccountLogin -->
        <test-method status="PASS" signature="done(org.testng.ITestResult)[pri:0, instance:test.Test_Mylist@7c16905e]" test-instance-name="" name="done" is-config="true" duration-ms="881" started-at="2020-06-09T20:52:17Z" finished-at="2020-06-09T20:52:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name="" status=FAILURE method=Test_Mylist.mylist_addByAccountLogin()[pri:0, instance:test.Test_Mylist@7c16905e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- done -->
      </class> <!-- test.Test_Mylist -->
      <class name="test.Test_Register">
        <test-method status="PASS" signature="set()[pri:0, instance:test.Test_Register@1753acfe]" test-instance-name="" name="set" is-config="true" duration-ms="10115" started-at="2020-06-09T20:50:58Z" finished-at="2020-06-09T20:51:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- set -->
        <test-method status="PASS" signature="register_invalidEmail()[pri:0, instance:test.Test_Register@1753acfe]" test-instance-name="" name="register_invalidEmail" duration-ms="38044" started-at="2020-06-09T20:51:08Z" finished-at="2020-06-09T20:51:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- register_invalidEmail -->
        <test-method status="PASS" signature="done(org.testng.ITestResult)[pri:0, instance:test.Test_Register@1753acfe]" test-instance-name="" name="done" is-config="true" duration-ms="258" started-at="2020-06-09T20:51:46Z" finished-at="2020-06-09T20:51:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name="" status=SUCCESS method=Test_Register.register_invalidEmail()[pri:0, instance:test.Test_Register@1753acfe] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- done -->
        <test-method status="PASS" signature="set()[pri:0, instance:test.Test_Register@1753acfe]" test-instance-name="" name="set" is-config="true" duration-ms="36752" started-at="2020-06-09T20:51:46Z" finished-at="2020-06-09T20:52:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- set -->
        <test-method status="PASS" signature="register_invalidPasswordNotMatch()[pri:0, instance:test.Test_Register@1753acfe]" test-instance-name="" name="register_invalidPasswordNotMatch" duration-ms="35490" started-at="2020-06-09T20:52:23Z" finished-at="2020-06-09T20:52:58Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- register_invalidPasswordNotMatch -->
        <test-method status="PASS" signature="done(org.testng.ITestResult)[pri:0, instance:test.Test_Register@1753acfe]" test-instance-name="" name="done" is-config="true" duration-ms="280" started-at="2020-06-09T20:52:58Z" finished-at="2020-06-09T20:52:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name="" status=SUCCESS method=Test_Register.register_invalidPasswordNotMatch()[pri:0, instance:test.Test_Register@1753acfe] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- done -->
        <test-method status="PASS" signature="set()[pri:0, instance:test.Test_Register@1753acfe]" test-instance-name="" name="set" is-config="true" duration-ms="17269" started-at="2020-06-09T20:52:59Z" finished-at="2020-06-09T20:53:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- set -->
        <test-method status="PASS" signature="register_invalidPasswordNumChar()[pri:0, instance:test.Test_Register@1753acfe]" test-instance-name="" name="register_invalidPasswordNumChar" duration-ms="29018" started-at="2020-06-09T20:53:16Z" finished-at="2020-06-09T20:53:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- register_invalidPasswordNumChar -->
        <test-method status="PASS" signature="done(org.testng.ITestResult)[pri:0, instance:test.Test_Register@1753acfe]" test-instance-name="" name="done" is-config="true" duration-ms="88" started-at="2020-06-09T20:53:45Z" finished-at="2020-06-09T20:53:45Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name="" status=SUCCESS method=Test_Register.register_invalidPasswordNumChar()[pri:0, instance:test.Test_Register@1753acfe] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- done -->
        <test-method status="PASS" signature="set()[pri:0, instance:test.Test_Register@1753acfe]" test-instance-name="" name="set" is-config="true" duration-ms="5553" started-at="2020-06-09T20:53:45Z" finished-at="2020-06-09T20:53:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- set -->
        <test-method status="PASS" signature="register_maxCharFullname()[pri:0, instance:test.Test_Register@1753acfe]" test-instance-name="" name="register_maxCharFullname" duration-ms="25079" started-at="2020-06-09T20:53:51Z" finished-at="2020-06-09T20:54:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- register_maxCharFullname -->
        <test-method status="PASS" signature="done(org.testng.ITestResult)[pri:0, instance:test.Test_Register@1753acfe]" test-instance-name="" name="done" is-config="true" duration-ms="287" started-at="2020-06-09T20:54:16Z" finished-at="2020-06-09T20:54:16Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name="" status=SUCCESS method=Test_Register.register_maxCharFullname()[pri:0, instance:test.Test_Register@1753acfe] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- done -->
        <test-method status="PASS" signature="set()[pri:0, instance:test.Test_Register@1753acfe]" test-instance-name="" name="set" is-config="true" duration-ms="11946" started-at="2020-06-09T20:54:16Z" finished-at="2020-06-09T20:54:28Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- set -->
        <test-method status="PASS" signature="register_validateGender()[pri:0, instance:test.Test_Register@1753acfe]" test-instance-name="" name="register_validateGender" duration-ms="87707" started-at="2020-06-09T20:54:28Z" finished-at="2020-06-09T20:55:56Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- register_validateGender -->
        <test-method status="PASS" signature="done(org.testng.ITestResult)[pri:0, instance:test.Test_Register@1753acfe]" test-instance-name="" name="done" is-config="true" duration-ms="77" started-at="2020-06-09T20:55:56Z" finished-at="2020-06-09T20:55:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name="" status=SUCCESS method=Test_Register.register_validateGender()[pri:0, instance:test.Test_Register@1753acfe] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- done -->
      </class> <!-- test.Test_Register -->
      <class name="test.Test_Chat">
        <test-method status="PASS" signature="set()[pri:0, instance:test.Test_Chat@548a9f61]" test-instance-name="" name="set" is-config="true" duration-ms="10107" started-at="2020-06-09T20:50:58Z" finished-at="2020-06-09T20:51:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- set -->
        <test-method status="FAIL" signature="chat_beforeLoginRCTI()[pri:0, instance:test.Test_Chat@548a9f61]" test-instance-name="" name="chat_beforeLoginRCTI" duration-ms="64049" started-at="2020-06-09T20:51:08Z" finished-at="2020-06-09T20:52:12Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [dikakoko] but found [dikakokodikakoko]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [dikakoko] but found [dikakokodikakoko]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:513)
	at org.testng.Assert.assertEqualsImpl(Assert.java:135)
	at org.testng.Assert.assertEquals(Assert.java:116)
	at org.testng.Assert.assertEquals(Assert.java:190)
	at org.testng.Assert.assertEquals(Assert.java:200)
	at object.Chats.validateUsername(Chats.java:84)
	at testcases.Chat.chatRcti(Chat.java:30)
	at test.Test_Chat.chat_beforeLoginRCTI(Test_Chat.java:16)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- chat_beforeLoginRCTI -->
        <test-method status="PASS" signature="done(org.testng.ITestResult)[pri:0, instance:test.Test_Chat@548a9f61]" test-instance-name="" name="done" is-config="true" duration-ms="2079" started-at="2020-06-09T20:52:12Z" finished-at="2020-06-09T20:52:14Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name="" status=FAILURE method=Test_Chat.chat_beforeLoginRCTI()[pri:0, instance:test.Test_Chat@548a9f61] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- done -->
        <test-method status="PASS" signature="set()[pri:0, instance:test.Test_Chat@548a9f61]" test-instance-name="" name="set" is-config="true" duration-ms="8903" started-at="2020-06-09T20:52:14Z" finished-at="2020-06-09T20:52:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- set -->
        <test-method status="FAIL" signature="chat_beforeLoginMNCTV()[pri:1, instance:test.Test_Chat@548a9f61]" test-instance-name="" name="chat_beforeLoginMNCTV" duration-ms="59890" started-at="2020-06-09T20:52:23Z" finished-at="2020-06-09T20:53:23Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [dikakoko] but found [dikakokodikakoko]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [dikakoko] but found [dikakokodikakoko]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:513)
	at org.testng.Assert.assertEqualsImpl(Assert.java:135)
	at org.testng.Assert.assertEquals(Assert.java:116)
	at org.testng.Assert.assertEquals(Assert.java:190)
	at org.testng.Assert.assertEquals(Assert.java:200)
	at object.Chats.validateUsername(Chats.java:84)
	at testcases.Chat.chatMnctv(Chat.java:48)
	at test.Test_Chat.chat_beforeLoginMNCTV(Test_Chat.java:24)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- chat_beforeLoginMNCTV -->
        <test-method status="PASS" signature="done(org.testng.ITestResult)[pri:0, instance:test.Test_Chat@548a9f61]" test-instance-name="" name="done" is-config="true" duration-ms="2703" started-at="2020-06-09T20:53:23Z" finished-at="2020-06-09T20:53:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name="" status=FAILURE method=Test_Chat.chat_beforeLoginMNCTV()[pri:1, instance:test.Test_Chat@548a9f61] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- done -->
        <test-method status="PASS" signature="set()[pri:0, instance:test.Test_Chat@548a9f61]" test-instance-name="" name="set" is-config="true" duration-ms="9076" started-at="2020-06-09T20:53:25Z" finished-at="2020-06-09T20:53:35Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- set -->
        <test-method status="FAIL" signature="chat_beforeLoginGTV()[pri:2, instance:test.Test_Chat@548a9f61]" test-instance-name="" name="chat_beforeLoginGTV" duration-ms="50571" started-at="2020-06-09T20:53:35Z" finished-at="2020-06-09T20:54:25Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [dikakoko] but found [dikakokodikakoko]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [dikakoko] but found [dikakokodikakoko]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:513)
	at org.testng.Assert.assertEqualsImpl(Assert.java:135)
	at org.testng.Assert.assertEquals(Assert.java:116)
	at org.testng.Assert.assertEquals(Assert.java:190)
	at org.testng.Assert.assertEquals(Assert.java:200)
	at object.Chats.validateUsername(Chats.java:84)
	at testcases.Chat.chatGtv(Chat.java:66)
	at test.Test_Chat.chat_beforeLoginGTV(Test_Chat.java:32)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- chat_beforeLoginGTV -->
        <test-method status="PASS" signature="done(org.testng.ITestResult)[pri:0, instance:test.Test_Chat@548a9f61]" test-instance-name="" name="done" is-config="true" duration-ms="1364" started-at="2020-06-09T20:54:25Z" finished-at="2020-06-09T20:54:26Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name="" status=FAILURE method=Test_Chat.chat_beforeLoginGTV()[pri:2, instance:test.Test_Chat@548a9f61] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- done -->
        <test-method status="PASS" signature="set()[pri:0, instance:test.Test_Chat@548a9f61]" test-instance-name="" name="set" is-config="true" duration-ms="2422" started-at="2020-06-09T20:54:26Z" finished-at="2020-06-09T20:54:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- set -->
        <test-method status="FAIL" signature="chat_beforeLoginINEWS()[pri:3, instance:test.Test_Chat@548a9f61]" test-instance-name="" name="chat_beforeLoginINEWS" duration-ms="63103" started-at="2020-06-09T20:54:29Z" finished-at="2020-06-09T20:55:32Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [dikakoko] but found [dikakokodikakoko]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [dikakoko] but found [dikakokodikakoko]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:513)
	at org.testng.Assert.assertEqualsImpl(Assert.java:135)
	at org.testng.Assert.assertEquals(Assert.java:116)
	at org.testng.Assert.assertEquals(Assert.java:190)
	at org.testng.Assert.assertEquals(Assert.java:200)
	at object.Chats.validateUsername(Chats.java:84)
	at testcases.Chat.chatInews(Chat.java:84)
	at test.Test_Chat.chat_beforeLoginINEWS(Test_Chat.java:40)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- chat_beforeLoginINEWS -->
        <test-method status="PASS" signature="done(org.testng.ITestResult)[pri:0, instance:test.Test_Chat@548a9f61]" test-instance-name="" name="done" is-config="true" duration-ms="1585" started-at="2020-06-09T20:55:32Z" finished-at="2020-06-09T20:55:34Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name="" status=FAILURE method=Test_Chat.chat_beforeLoginINEWS()[pri:3, instance:test.Test_Chat@548a9f61] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- done -->
      </class> <!-- test.Test_Chat -->
    </test> <!-- Test -->
  </suite> <!-- Suite -->
</testng-results>
